from bluesky.plans import count
from bluesky_widgets.models.plot_builders import Lines
from bluesky_widgets.utils.streaming import stream_documents_into_runs


def test_kafka_remote_dispatcher(
    RE,
    hw,
    publisher_factory,
    special_secret_remote_dispatcher_process_factory,
    external_process_document_queue,
):
    # COMPONENT 1
    # a Kafka broker must be running
    # in addition the topic "test.remote.dispatcher" must exist
    # or the broker must be configured to create topics on demand (recommended)

    # COMPONENT 2
    # Run a RemoteDispatcher on a separate process. Pass the documents
    # it receives over a Queue to this process so we can count them for
    # our test.

    lines_model = Lines(x="time", ys=["det"])
    assert len(lines_model.runs) == 0

    test_topic = "test.remote.dispatcher"
    with external_process_document_queue(
        topics=[test_topic],
        process_factory=special_secret_remote_dispatcher_process_factory,
        dispatcher_subscribers=(stream_documents_into_runs(lines_model),),
    ) as document_queue:

        # COMPONENT 3
        # Set up a RunEngine in this process that will
        # send all documents to a bluesky_kafka.Publisher
        # and accumulate all documents in the local_documents list
        kafka_publisher = publisher_factory(topic=test_topic, flush_on_stop_doc=True)
        RE.subscribe(kafka_publisher)

        # documents will be generated by this plan
        # and published by the Kafka Publisher
        RE(count([hw.det]))

        assert len(lines_model.runs) == 1
